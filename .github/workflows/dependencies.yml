name: Dependency Management

on:
  schedule:
    # Run every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
  pull_request:
    paths:
      - '**/*.csproj'
      - '**/packages.config'
      - '.github/workflows/dependencies.yml'

jobs:
  check-dependencies:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '6.0.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Check for vulnerable packages
      run: |
        # List all vulnerable packages
        echo "Checking for vulnerable packages..."
        dotnet list package --vulnerable --include-transitive || true

    - name: Check for outdated packages
      run: |
        # Install dotnet-outdated tool
        dotnet tool install --global dotnet-outdated-tool
        
        # Check each project for outdated dependencies
        echo "Checking for outdated packages..."
        for proj in $(find . -name "*.csproj" -type f); do
          echo "Checking $proj..."
          dotnet-outdated -u:Auto "$proj" || true
        done

    - name: Generate dependency report
      run: |
        # Create reports directory
        mkdir -p dependency-reports
        
        # Generate detailed package report for each project
        for proj in $(find . -name "*.csproj" -type f); do
          proj_name=$(basename "$proj" .csproj)
          echo "Generating report for $proj_name..."
          
          dotnet list "$proj" package --include-transitive > "dependency-reports/${proj_name}-packages.txt"
          dotnet list "$proj" package --vulnerable --include-transitive > "dependency-reports/${proj_name}-vulnerable.txt" || echo "No vulnerable packages found" > "dependency-reports/${proj_name}-vulnerable.txt"
          dotnet list "$proj" package --outdated > "dependency-reports/${proj_name}-outdated.txt" || echo "No outdated packages found" > "dependency-reports/${proj_name}-outdated.txt"
        done
        
        # Create summary report
        echo "# Dependency Report Summary" > dependency-reports/SUMMARY.md
        echo "Generated on: $(date)" >> dependency-reports/SUMMARY.md
        echo "" >> dependency-reports/SUMMARY.md
        
        # Add vulnerable packages section
        echo "## Vulnerable Packages" >> dependency-reports/SUMMARY.md
        if grep -r "has the following vulnerable packages" dependency-reports/*-vulnerable.txt 2>/dev/null; then
          grep -r "has the following vulnerable packages" dependency-reports/*-vulnerable.txt >> dependency-reports/SUMMARY.md
        else
          echo "No vulnerable packages found across all projects." >> dependency-reports/SUMMARY.md
        fi
        echo "" >> dependency-reports/SUMMARY.md
        
        # Add outdated packages section
        echo "## Outdated Packages" >> dependency-reports/SUMMARY.md
        for file in dependency-reports/*-outdated.txt; do
          if [ -s "$file" ] && ! grep -q "No outdated packages found" "$file"; then
            echo "### $(basename "$file" -outdated.txt)" >> dependency-reports/SUMMARY.md
            tail -n +3 "$file" >> dependency-reports/SUMMARY.md
            echo "" >> dependency-reports/SUMMARY.md
          fi
        done

    - name: Upload dependency reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dependency-reports
        path: dependency-reports/
        retention-days: 30

    - name: Comment PR with dependency status
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const summaryPath = 'dependency-reports/SUMMARY.md';
          
          if (fs.existsSync(summaryPath)) {
            const summary = fs.readFileSync(summaryPath, 'utf8');
            
            // Check if there are any vulnerabilities
            const hasVulnerabilities = summary.includes('has the following vulnerable packages');
            
            const comment = `## 📦 Dependency Report
            
            ${summary}
            
            ${hasVulnerabilities ? '⚠️ **Vulnerable packages detected!** Please update the affected dependencies.' : '✅ No vulnerable packages detected.'}
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }

  update-jellyfin-packages:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '6.0.x'

    - name: Check for Jellyfin package updates
      id: check-updates
      run: |
        # Check if any Jellyfin packages need updating
        UPDATE_NEEDED=false
        
        for proj in $(find . -name "*.csproj" -type f); do
          if dotnet list "$proj" package --outdated | grep -E "(Jellyfin\.|MediaBrowser\.)" > /dev/null; then
            UPDATE_NEEDED=true
            break
          fi
        done
        
        echo "update_needed=$UPDATE_NEEDED" >> $GITHUB_OUTPUT

    - name: Update Jellyfin packages
      if: steps.check-updates.outputs.update_needed == 'true'
      run: |
        # Update Jellyfin packages to latest stable versions
        for proj in $(find . -name "*.csproj" -type f); do
          echo "Updating packages in $proj..."
          
          # Update Jellyfin.Controller and Jellyfin.Common
          dotnet add "$proj" package Jellyfin.Controller || true
          dotnet add "$proj" package Jellyfin.Common || true
        done

    - name: Create Pull Request
      if: steps.check-updates.outputs.update_needed == 'true'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: 'chore: update Jellyfin dependencies'
        title: 'Update Jellyfin Dependencies'
        body: |
          ## Automated Dependency Update
          
          This PR updates the Jellyfin dependencies to their latest versions.
          
          ### Changes
          - Updated `Jellyfin.Controller` package
          - Updated `Jellyfin.Common` package
          
          Please review and test before merging.
        branch: update-jellyfin-dependencies
        delete-branch: true